#import <Foundation/Foundation.h>
#import "SWGCreateOauthParams.h"
#import "SWGGetOauthAccessToken.h"
#import "SWGOauthAccessToken.h"
#import "SWGApi.h"

/**
* Phone.com API
* This is a Phone.com api Swagger definition
*
* OpenAPI spec version: 1.0.0
* Contact: apisupport@phone.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface SWGOauthApi: NSObject <SWGApi>

extern NSString* kSWGOauthApiErrorDomain;
extern NSInteger kSWGOauthApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(SWGApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// To create an access token via the /oauth/access-token API, an API user may choose any one of the grant types it supports: Authorization Code Grant, Client Credential Grant, Password Credential Grant or Refresh Token Grant.
/// To create an access token via the /oauth/access-token API, an API user may choose any one of the grant types it supports: Authorization Code Grant, Client Credential Grant, Password Credential Grant or Refresh Token Grant. For Authorization Code Grant, the input parameter 'code' is generated via the Create Authorization API. NOTE: The Create Access Token API now accepts requests in query string format as well as JSON body format. See OAuth for more details on how to obtain client id and client secret to create an access token at real time.
///
/// @param data Oauth data (optional)
/// 
///  code:201 message:"Created",
///  code:401 message:"Unauthorized access",
///  code:403 message:"Forbidden",
///  code:422 message:"Invalid Data"
///
/// @return SWGOauthAccessToken*
-(NSURLSessionTask*) createOauthAccessTokenWithData: (SWGCreateOauthParams*) data
    completionHandler: (void (^)(SWGOauthAccessToken* output, NSError* error)) handler;


/// Create Authorization Code or Access Token.
/// Create Authorization Code or Access Token. The /oauth/authorization API supports Authorization Grant and Implicit Grant. In Authorization Grant, this API returns a code (response_type=code) for clients implemented in a browser using a scripting language such as JavaScript. Users may then use the code via the Create Access Token API to create an access token. The Implicit Grant is a simplified authorization code flow. In the implicit flow, instead of issuing the client an authorization code, the client is issued an access token (response_type=token) directly. See OAuth for more details on how to obtain client id and client secret to create authorization code access token at real time.
///
/// @param clientId Client ID
/// @param responseType &#39;token&#39; for Implicit Grant; &#39;code&#39; for Authorization Code Grant
/// @param scope account-owner, extension-user and/or methods:ALL, separated by space (%20)
/// @param redirectUri The URL where the response data of this API is redirected to
/// 
///  code:302 message:"http://localhost/?code=mRxUuwgl0Xgjg8fIjweikoJPb1aaMBU8bt706656~6&state=",
///  code:401 message:"Unauthorized access"
///
/// @return 
-(NSURLSessionTask*) createOauthAuthorizationWithClientId: (NSString*) clientId
    responseType: (NSString*) responseType
    scope: (NSString*) scope
    redirectUri: (NSString*) redirectUri
    completionHandler: (void (^)(NSError* error)) handler;


/// Retrieve details of an access token, such as scope, expiration and extension ID.
/// Retrieve details of an access token, such as scope, expiration and extension ID. Voip ID will be returned as well if scope contains account-owner scope.
///
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized access"
///
/// @return SWGGetOauthAccessToken*
-(NSURLSessionTask*) getOauthAccessTokenWithCompletionHandler: 
    (void (^)(SWGGetOauthAccessToken* output, NSError* error)) handler;



@end
