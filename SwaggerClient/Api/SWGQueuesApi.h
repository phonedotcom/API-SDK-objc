#import <Foundation/Foundation.h>
#import "SWGCreateQueueParams.h"
#import "SWGDeleteQueue.h"
#import "SWGListQueues.h"
#import "SWGQueueFull.h"
#import "SWGApi.h"

/**
* Phone.com API
* This is a Phone.com api Swagger definition
*
* OpenAPI spec version: 1.0.0
* Contact: apisupport@phone.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface SWGQueuesApi: NSObject <SWGApi>

extern NSString* kSWGQueuesApiErrorDomain;
extern NSInteger kSWGQueuesApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(SWGApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Create a queue
/// For more on the input fields, see Account Queues.
///
/// @param accountId Account ID
/// @param data Queue data (optional)
/// 
///  code:201 message:"Created",
///  code:401 message:"Unauthorized access",
///  code:403 message:"Forbidden",
///  code:422 message:"Invalid Data"
///
/// @return SWGQueueFull*
-(NSURLSessionTask*) createAccountQueueWithAccountId: (NSNumber*) accountId
    data: (SWGCreateQueueParams*) data
    completionHandler: (void (^)(SWGQueueFull* output, NSError* error)) handler;


/// Delete a queue
/// This service a queue from the account. For more information on queue properties, see Account Queues.
///
/// @param accountId Account ID
/// @param queueId Queue ID
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized access",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found",
///  code:409 message:"Conflict"
///
/// @return SWGDeleteQueue*
-(NSURLSessionTask*) deleteAccountQueueWithAccountId: (NSNumber*) accountId
    queueId: (NSNumber*) queueId
    completionHandler: (void (^)(SWGDeleteQueue* output, NSError* error)) handler;


/// Show details of an individual queue
/// This service shows the details of an individual queue. For more on the input fields, see Account Queues.
///
/// @param accountId Account ID
/// @param queueId Queue ID
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized access",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGQueueFull*
-(NSURLSessionTask*) getAccountQueueWithAccountId: (NSNumber*) accountId
    queueId: (NSNumber*) queueId
    completionHandler: (void (^)(SWGQueueFull* output, NSError* error)) handler;


/// Get a list of queues for an account
/// The List Queues service lists all the queues belong to the account. See Account Queues for more info on the properties.
///
/// @param accountId Account ID
/// @param filtersId ID filter (optional)
/// @param filtersName Name filter (optional)
/// @param sortId ID sorting (optional)
/// @param sortName Name sorting (optional)
/// @param limit Max results (optional)
/// @param offset Results to skip (optional)
/// @param fields Field set (optional)
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized access",
///  code:403 message:"Forbidden"
///
/// @return SWGListQueues*
-(NSURLSessionTask*) listAccountQueuesWithAccountId: (NSNumber*) accountId
    filtersId: (NSArray<NSString*>*) filtersId
    filtersName: (NSArray<NSString*>*) filtersName
    sortId: (NSString*) sortId
    sortName: (NSString*) sortName
    limit: (NSNumber*) limit
    offset: (NSNumber*) offset
    fields: (NSString*) fields
    completionHandler: (void (^)(SWGListQueues* output, NSError* error)) handler;


/// Replace a queue
/// The Replace Queue service replaces the parameters of a queue. For more on the input fields, see Account Queues.
///
/// @param accountId Account ID
/// @param queueId Queue ID
/// @param data Queue data (optional)
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized access",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found",
///  code:422 message:"Invalid Data"
///
/// @return SWGQueueFull*
-(NSURLSessionTask*) replaceAccountQueueWithAccountId: (NSNumber*) accountId
    queueId: (NSNumber*) queueId
    data: (SWGCreateQueueParams*) data
    completionHandler: (void (^)(SWGQueueFull* output, NSError* error)) handler;



@end
